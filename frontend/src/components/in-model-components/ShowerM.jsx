// import React, { useMemo } from 'react';
// import { useGLTF } from '@react-three/drei';
// import { useLilGuiPosition } from '../../customeHooks/useLilGui';

// export function ShowerM({ isVisible, isSelected, ...props }) {
//   const { nodes, materials } = useGLTF('./models/parts144/shower-m.glb');
// const position = useLilGuiPosition(true, [0.5, 1.477, -0.93], 'ShowerM');
//   // Highlighted materials
//   const highlightMaterial = useMemo(() => {
//     const material = materials.Material.clone();

//     material.emissiveIntensity = 1;
//     return material;
//   }, [materials.Material]);

//   const highlightMaterial007 = useMemo(() => {
//     const material = materials['Material.007'].clone();

//     material.emissiveIntensity = 1;
//     return material;
//   }, [materials['Material.007']]);

//   const highlightMaterial075 = useMemo(() => {
//     const material = materials['Material.075'].clone();

//     material.emissiveIntensity = 1;
//     return material;
//   }, [materials['Material.075']]);
// // position={[0.477, 1.471, -0.993]}
//   return (
//     <group {...props} dispose={null} visible={isVisible}>
//       <group position={position}  scale={[1, 1, 0.87]}>
//         {nodes?.Cube010?.geometry && (
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube010.geometry}
//             material={isSelected ? highlightMaterial : materials.Material}
//           />
//         )}
//         {nodes?.Cube010_1?.geometry && (
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube010_1.geometry}
//             material={isSelected ? highlightMaterial007 : materials['Material.007']}
//           />
//         )}
//         {nodes?.Cube010_2?.geometry && (
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube010_2.geometry}
//             material={isSelected ? highlightMaterial075 : materials['Material.075']}
//           />
//         )}
//       </group>
//     </group>
//   );
// }

// useGLTF.preload('./models/parts144/shower-m.glb');


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
// rotate by gsap
// import { useGLTF } from '@react-three/drei';
// import { useRef, useState } from 'react';
// import { useFrame } from '@react-three/fiber';
// import useRotateOnce from "../../customeHooks/useRotateModel"; // adjust the path as needed

// export function ShowerM({ alreadyAnimated, setAnimatedModelIds, modelId, ...props }) {
//   const { nodes, materials } = useGLTF('./models/in-parts144/shower_M.glb');
//   const groupRef = useRef();

//   const [readyToAnimate, setReadyToAnimate] = useState(false);


//   useRotateOnce({
//     ref: groupRef,
//     shouldAnimate: !alreadyAnimated && readyToAnimate,
//     reverse: true,
//     modelId,
//     markAnimated: setAnimatedModelIds,
//   });

//   // âœ… Trigger animation after one frame
//   const frameCount = useRef(0);
//   useFrame(() => {
//     if (frameCount.current < 1 && groupRef.current) {
//       frameCount.current++;
//       setReadyToAnimate(true);
//     }
//   });

//   return (
//     <group {...props} dispose={null}>
//       <group
//         ref={groupRef}
//         position={[0.52, 1.477, -0.93]}
//         rotation={[0, 0, 0]}
//         scale={[1, 1, 0.90]}
//       >
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Cube010.geometry}
//           material={materials.Material}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Cube010_1.geometry}
//           material={materials['Material.007']}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Cube010_2.geometry}
//           material={materials['Material.075']}
//         />
//       </group>
//     </group>
//   );
// }


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from '@react-three/drei'

export function ShowerM(props) {
  const { nodes, materials } = useGLTF('./models/in-parts144/shower_M.glb');
  return (
    <group {...props} dispose={null}>
      <group position={[0.477, 1.471, -0.873]} scale={[1, 1, 0.97]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010.geometry}
          material={materials.Material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010_1.geometry}
          material={materials['Material.007']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010_2.geometry}
          material={materials['Material.075']}
        />
      </group>
    </group>
  )
}

useGLTF.preload('./models/in-parts144/shower_M.glb');

