// import React, { useMemo } from 'react';
// import { useGLTF } from '@react-three/drei';

// export function ShowerS({ isVisible, isSelected, ...props }) {
//   const { nodes, materials } = useGLTF('./models/parts144/shower_S.glb');

//   // Highlighted materials for each unique material
//   const highlightedMaterial = useMemo(() => {
//     const material = materials.Material.clone();

//     material.emissiveIntensity = 1;
//     return material;
//   }, [materials.Material]);

//   const highlightedMaterial007 = useMemo(() => {
//     const material = materials['Material.007'].clone();

//     material.emissiveIntensity = 1;
//     return material;
//   }, [materials['Material.007']]);

//   const highlightedMaterial075 = useMemo(() => {
//     const material = materials['Material.075'].clone();

//     material.emissiveIntensity = 1;
//     return material;
//   }, [materials['Material.075']]);

//   return (
//     <group {...props} dispose={null} visible={isVisible}>
//       <group position={[0.477, 1.471, -0.918]} scale={[1, 1, 0.849]}>
//         {nodes?.Cube010?.geometry && (
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube010.geometry}
//             material={isSelected ? highlightedMaterial : materials.Material}
//           />
//         )}
//         {nodes?.Cube010_1?.geometry && (
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube010_1.geometry}
//             material={isSelected ? highlightedMaterial007 : materials['Material.007']}
//           />
//         )}
//         {nodes?.Cube010_2?.geometry && (
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube010_2.geometry}
//             material={isSelected ? highlightedMaterial075 : materials['Material.075']}
//           />
//         )}
//       </group>
//     </group>
//   );
// }

// useGLTF.preload('./models/parts144/shower_S.glb');

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
// */

// import React, { useRef,useState } from 'react'
// import { useGLTF } from '@react-three/drei'
// import useRotateOnce from "../../customeHooks/useRotateModel";
// import { useFrame } from '@react-three/fiber';

// export  function ShowerS({ alreadyAnimated, setAnimatedModelIds, modelId, ...props }) {
//   const { nodes, materials } = useGLTF('./models/in-parts144/shower_S.glb')
//   const groupRef = useRef();

//   const [readyToAnimate, setReadyToAnimate] = useState(false);
//     useRotateOnce({
//       ref: groupRef,
//       shouldAnimate: !alreadyAnimated && readyToAnimate,
//       reverse: true,
//       modelId,
//       markAnimated: setAnimatedModelIds,
//     });

//     // âœ… Trigger animation after one frame
//     const frameCount = useRef(0);
//     useFrame(() => {
//       if (frameCount.current < 1 && groupRef.current) {
//         frameCount.current++;
//         setReadyToAnimate(true);
//       }
//     });
//   return (
//     <group {...props} dispose={null}>
//       <group   ref={groupRef} position={[0.477, 1.471, -0.918]} scale={[1, 1, 0.849]}>
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Cube010.geometry}
//           material={materials.Material}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Cube010_1.geometry}
//           material={materials['Material.007']}
//         />
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.Cube010_2.geometry}
//           material={materials['Material.075']}
//         />
//       </group>
//     </group>
//   )
// }

// useGLTF.preload('./models/in-parts144/shower_S.glb')


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

export function ShowerS(props) {
  const { nodes, materials } = useGLTF('./models/in-parts144/shower_S.glb')
  return (
    <group {...props} dispose={null}>
      <group position={[0.477, 1.471, -0.918]} scale={[1, 1, 0.849]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010.geometry}
          material={materials.Material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010_1.geometry}
          material={materials['Material.007']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010_2.geometry}
          material={materials['Material.075']}
        />
      </group>
    </group>
  )
}

useGLTF.preload('./models/in-parts144/shower_S.glb')